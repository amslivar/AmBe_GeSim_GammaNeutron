#include "G4Event.hh"
//#include "G4GeneralParticleSource.hh"
#include "G4ParticleGun.hh"
#include "Randomize.hh"
#include "CLHEP/Random/Random.h"
#include "gesimPrimaryGeneratorAction.hh"

#include "G4HEPEvtInterface.hh"
#include "gesimDetectorConstruction.hh"
#include "G4Tubs.hh"
#include "G4VPhysicalVolume.hh"
#include "G4LogicalVolume.hh"
#include "G4HEPEvtInterface.hh"
#include "G4SystemOfUnits.hh"
#include "G4Neutron.hh"
#include "G4Gamma.hh"
#include "G4ParticleDefinition.hh"
#include "G4ParticleTable.hh"
G4VPrimaryGenerator* HEPEvt_n0;
G4VPrimaryGenerator* HEPEvt_n1;
G4VPrimaryGenerator* HEPEvt_n2;
G4VPrimaryGenerator* HEPEvt_4438gamma;
G4VPrimaryGenerator* HEPEvt_Am;


//This is the primary generator action class
//It is responsible for generating the primary particles
//It is called by the event action class
//Every event has an Am241 gamma and a neutron
// The n1 neutrons are accompanied by a 4438 gamma

// The neutron is generated by the HEPEvt_n0, HEPEvt_n1, HEPEvt_n2 generators
// The Am241 gamma is generated by the HEPEvt_Am generator
// The 4438 gamma is generated by the HEPEvt_4438gamma generator


// Usage:
// g++ energyspectrum.cc -o energyspectrum.exe
//  ./energyspectrum.exe 10000000 > particle_generator.data

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

gesimPrimaryGeneratorAction::gesimPrimaryGeneratorAction(gesimDetectorConstruction* gesimDC)
    : gesimDetector(gesimDC), fParticleGun(0), HEPEvt_n0(0), HEPEvt_n1(0), HEPEvt_n2(0), HEPEvt_4438gamma(0), HEPEvt_Am(0) {
 
    //G4int nofParticles = 1;
    //fParticleGun = new G4ParticleGun(nofParticles);

    // Initialize the HEPEvt generators 
    HEPEvt_n0 = new G4HEPEvtInterface("/mnt/raid5/users/amslivar/AmBe_work/AmBe_v2/AmBe_neutron_gamma_spec/events/n0_generator.data");
    HEPEvt_n1 = new G4HEPEvtInterface("/mnt/raid5/users/amslivar/AmBe_work/AmBe_v2/AmBe_neutron_gamma_spec/events/n1_generator.data");
    HEPEvt_n2 = new G4HEPEvtInterface("/mnt/raid5/users/amslivar/AmBe_work/AmBe_v2/AmBe_neutron_gamma_spec/events/n2_generator.data");
    HEPEvt_4438gamma = new G4HEPEvtInterface("/mnt/raid5/users/amslivar/AmBe_work/AmBe_v2/AmBe_neutron_gamma_spec/events/4438gamma_generator.data");
    HEPEvt_Am = new G4HEPEvtInterface("/mnt/raid5/users/amslivar/AmBe_work/AmBe_v2/AmBe_neutron_gamma_spec/events/am241_generator.data");

    //G4cout << "Opened generator data file " << G4endl;
    //fPrimaryGenerator = new B4PrimaryGenerator(gesimDC);
    
}

gesimPrimaryGeneratorAction::~gesimPrimaryGeneratorAction()
{
    delete fParticleGun;
    delete HEPEvt_n0;
    delete HEPEvt_n1;
    delete HEPEvt_n2;
    delete HEPEvt_4438gamma;
    delete HEPEvt_Am;
    //delete fPrimaryGenerator;
}

void gesimPrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
    // source location 
    auto srcCtrInCvtyCord =  G4ThreeVector(0.12*CLHEP::mm, 0.*CLHEP::mm, -4.*CLHEP::mm);//face of the Ge detector


    // ******************************************************************************************************
    // Define what group (n0, n1, n2) the neutron belongs to
    // ******************************************************************************************************

    G4double probability_state;
    G4ThreeVector pos = srcCtrInCvtyCord;
    //G4double singleNeutronEnergy = 0.0;

    //n0->27%, n1->62.7% and n2->10.3% (individual probabilities)
    // Down below are the cumulative probabilities
    G4double AmBe_n0 = 0.270;
    G4double AmBe_n1 = 0.897;

    // First determine the neutron group
    probability_state = G4UniformRand();
    //G4int state = 0;


    // when state =0 or 2, neutron only 
    // when state =1, neutron and gamma
    CLHEP::HepRandom::setTheEngine(new CLHEP::MTwistEngine);
    CLHEP::HepRandom::setTheSeed((unsigned)clock());

    if (probability_state < AmBe_n0)
    {
        HEPEvt_n0->SetParticlePosition(srcCtrInCvtyCord);
        HEPEvt_n0->GeneratePrimaryVertex(anEvent);
        HEPEvt_Am->SetParticlePosition(srcCtrInCvtyCord);
        HEPEvt_Am->GeneratePrimaryVertex(anEvent);
    }
    else if (probability_state < AmBe_n1)
    {
        HEPEvt_n1->SetParticlePosition(srcCtrInCvtyCord);
        HEPEvt_n1->GeneratePrimaryVertex(anEvent);
        HEPEvt_4438gamma->SetParticlePosition(srcCtrInCvtyCord);
        HEPEvt_4438gamma->GeneratePrimaryVertex(anEvent);
        HEPEvt_Am->SetParticlePosition(srcCtrInCvtyCord);
        HEPEvt_Am->GeneratePrimaryVertex(anEvent);
    }
    else
    {
        //state = 2;
        HEPEvt_n2->SetParticlePosition(srcCtrInCvtyCord);
        HEPEvt_n2->GeneratePrimaryVertex(anEvent);
        HEPEvt_Am->SetParticlePosition(srcCtrInCvtyCord);
        HEPEvt_Am->GeneratePrimaryVertex(anEvent);
    }
}



